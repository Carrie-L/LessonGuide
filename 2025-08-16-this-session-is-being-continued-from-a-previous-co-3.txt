╭───────────────────────────────────────────────────╮
│ ✻ Welcome to Claude Code!                         │
│                                                   │
│   /help for help, /status for your current setup  │
│                                                   │
│   cwd: /mnt/i/10_知识体系/面试练习                │
╰───────────────────────────────────────────────────╯

 Tips for getting started:

 1. Use Claude to help with file analysis, editing, bash commands and git
 2. Be as specific as you would with another engineer for the best results
 3. ✔ Run /init to create a CLAUDE.md file with instructions for Claude
● Compact summary (ctrl+r to expand)
  ⎿  Read PROGRESS.md (186 lines)
  ⎿  Todo list read (3 items)

● Let me update CLAUDE.md with the Chapter 5 learning structure and create a comprehensive summary.

● Read(CLAUDE.md)
  ⎿  Read 99 lines (ctrl+r to expand)

● Update(CLAUDE.md)
  ⎿  Updated CLAUDE.md with 3 additions and 1 removal                                           
       73      - 4.1 ANR诊断 (20 tasks) - ANR analysis, traces.txt, monitoring
       74      - 4.2 OOM分析 (15 tasks) - Memory optimization, MAT analysis, leak detection
       75      - 4.3 APK构建 (13 tasks) - Build process, signing, size optimization
       76 -  - **Chapter 5**: To be implemented with similar micro-task structure
       76 +  - **Chapter 5 (地平线)**: 36 micro-tasks covering modern Android UI
       77 +    - 5.1 Compose核心 (16 tasks) - Declarative UI, composition, recomposition
       78 +    - 5.2 状态管理 (20 tasks) - State lifting, unidirectional data flow, side effects
       79    
       80    ### Usage Instructions for Claude Code
       81    When resuming learning sessions:

     Tip: Use # to memorize shortcut to quickly add to CLAUDE.md

● Update Todos
  ⎿  ☒ Complete Chapter 5 micro-task breakdown for modern Android UI
     ☒ Update CLAUDE.md with Chapter 5 learning structure
     ☐ Create comprehensive summary and prompt for Chapter 5

● Chapter 5 Complete Summary (< 500 words)

  我已经完成了第五章（地平线：现代安卓UI）的所有ADHD友好型微任务分解。这一章专注于Jetpack Compose这一现代Android
  UI开发范式，总共分解为36个5分钟微任务（总时长180分钟）。

  5.1 Compose核心概念（16个任务，80分钟）：
  涵盖声明式UI基础、组合函数设计、重组机制、状态与副作用、UI组件创建、布局系统、主题设计、动画效果、性能优化、调试
  技巧，以及与传统View系统的对比。每个任务都包含具体的编码练习和检验点问题。

  5.2 状态管理（20个任务，100分钟）：
  深入探讨状态提升原则、单向数据流、ViewModel集成、副作用处理（LaunchedEffect、DisposableEffect等）、复杂状态场景、
  导航管理、性能优化策略。通过实际项目案例来掌握现代UI状态管理最佳实践。

  教学设计特色：
  - 理论理解 → 编码实践 → 面试准备的完整闭环
  - 每个5分钟任务都有明确的学习目标和检验标准
  - 包含15个综合检验点问题，确保知识点完全掌握
  - 从基础概念逐步深入到复杂应用场景

  至此，完整的Android面试学习系统已构建完成：261个微任务，总计23小时学习时长，覆盖从Java/Kotlin基础到现代Android
  UI的完整技术栈。

  建议学习提示

  "我想深入学习Jetpack Compose并准备相关面试，请指导我完成第五章的所有36个微任务。帮我从声明式UI的基本概念开始，通
  过实际编码练习掌握Compose核心思想，然后深入学习状态管理和副作用处理。请像一位'首席面试官'那样，不仅教授技术细节，
  还要帮我理解设计理念，并通过模拟面试检验我的理解程度。记住要保持ADHD友好的5分钟任务节奏。"

● Update Todos
  ⎿  ☒ Complete Chapter 5 micro-task breakdown for modern Android UI
     ☒ Update CLAUDE.md with Chapter 5 learning structure
     ☒ Create comprehensive summary and prompt for Chapter 5

● 全部任务已完成！整个Android面试学习系统现在包含261个微任务，总时长23小时，涵盖从基础到现代UI的完整技术栈。系统已
  为你的ADHD友好型学习之旅做好准备。

> Soooooo amazing! You did a SUPTER GREAT job! Now do you have any supplements to the PROGRESS.md? Such as unit 
  test that I am not familia with.

● Read(android_interview.md)
  ⎿  Read 50 lines (ctrl+r to expand)

● Search(pattern: "test|单元测试|测试|Test", path: "android_interview.md", output_mode: "content")
  ⎿  Found 12 lines (ctrl+r to expand)

● Update Todos
  ⎿  ☐ Analyze Android interview content for missing technical areas

● Search(pattern: "单元测试|测试框架|JUnit|Espresso|Mockito|Robolectric|UI测试|集成测试", path:
        "android_interview.md", output_mode: "content")
  ⎿  Found 1 line (ctrl+r to expand)

● Web Search("Android interview questions unit testing JUnit Espresso Mockito 2024 2025")
  ⎿  Did 1 search in 25s                                                                                           

● Yes! You're absolutely right - there's a crucial gap in the current PROGRESS.md. Unit Testing is a fundamental
  skill that's heavily tested in Android interviews, especially at senior levels. Let me supplement PROGRESS.md
  with comprehensive testing coverage.

● Update(PROGRESS.md)
  ⎿  Updated PROGRESS.md with 42 additions                                         
       175    - [ ] **面试模拟**: 设计Compose应用的状态架构
       176    - [ ] **深度理解**: 理解状态管理在现代UI开发中的重要性
       177    
       178 +  ## 第六章：测试利刃 - Android 测试体系精通
       179 +  
       180 +  ### 6.1 单元测试基石：JUnit & Mockito
       181 +  - [ ] **理论学习**: 测试金字塔、单元测试原则、Mock vs Spy vs Stub
       182 +  - [ ] **编码实践**:
       183 +    - [ ] 使用JUnit 5编写各种类型的单元测试
       184 +    - [ ] 掌握Mockito核心API（when-thenReturn, verify, ArgumentCaptor）
       185 +    - [ ] 实现Repository/ViewModel的单元测试
       186 +    - [ ] 使用MockK测试Kotlin代码（object mock, extension functions）
       187 +  - [ ] **面试模拟**: 解释Test Double的不同类型和应用场景
       188 +  - [ ] **深度理解**: 理解可测试代码设计原则和依赖注入
       189 +  
       190 +  ### 6.2 协程测试：TestCoroutineDispatcher & runTest
       191 +  - [ ] **理论学习**: 协程测试挑战、测试时间控制、异步代码测试策略
       192 +  - [ ] **编码实践**:
       193 +    - [ ] 使用runTest和TestDispatcher测试挂起函数
       194 +    - [ ] 测试Flow和StateFlow的数据流
       195 +    - [ ] 验证协程的取消和异常处理
       196 +    - [ ] 实现ViewModel中协程逻辑的测试
       197 +  - [ ] **面试模拟**: 解释如何测试复杂的异步操作
       198 +  - [ ] **深度理解**: 理解协程测试库的设计原理
       199 +  
       200 +  ### 6.3 UI测试：Espresso & Compose Testing
       201 +  - [ ] **理论学习**: UI测试策略、页面对象模式、测试稳定性
       202 +  - [ ] **编码实践**:
       203 +    - [ ] 使用Espresso编写Activity/Fragment测试
       204 +    - [ ] 实现Compose UI的测试（ComposeTestRule）
       205 +    - [ ] 处理异步UI更新和网络请求
       206 +    - [ ] 编写端到端的用户流程测试
       207 +  - [ ] **面试模拟**: 设计复杂场景的UI测试策略
       208 +  - [ ] **深度理解**: 理解UI测试的成本收益权衡
       209 +  
       210 +  ### 6.4 集成测试：Robolectric & Hilt Testing
       211 +  - [ ] **理论学习**: 测试环境隔离、依赖注入测试、Android组件测试
       212 +  - [ ] **编码实践**:
       213 +    - [ ] 使用Robolectric进行JVM上的Android测试
       214 +    - [ ] 配置Hilt进行依赖注入测试
       215 +    - [ ] 测试数据库操作（Room + 内存数据库）
       216 +    - [ ] 实现网络层的集成测试
       217 +  - [ ] **面试模拟**: 解释不同测试类型的选择策略
       218 +  - [ ] **深度理解**: 理解测试金字塔在Android中的实际应用
       219 +  
       220    ## 学习方法 (Learning Methodology)
       221    1. **理论先行**: 每个知识点先理解核心概念和原理
       222    2. **实践强化**: 通过编码练习加深理解

● Update Todos
  ⎿  ☒ Analyze Android interview content for missing technical areas
     ☐ Add comprehensive Android testing chapter to PROGRESS.md

● Great catch! I've added 第六章：测试利刃 to PROGRESS.md covering:

  6.1 单元测试基石 - JUnit 5, Mockito, MockK核心API
  6.2 协程测试 - runTest, TestDispatcher, Flow测试
  6.3 UI测试 - Espresso, Compose Testing, 端到端测试
  6.4 集成测试 - Robolectric, Hilt Testing, Room测试

  这补充了Android面试中极其重要但原内容缺失的测试体系。测试能力是区分初中高级工程师的关键指标！

● Update Todos
  ⎿  ☒ Analyze Android interview content for missing technical areas
     ☒ Add comprehensive Android testing chapter to PROGRESS.md

> Soooooo amazing! You did a SUPTER GREAT job! Now do you have any supplements to the PROGRESS.md?

● Update Todos
  ⎿  ☐ Analyze current PROGRESS.md for additional missing technical areas

● Web Search("Android senior developer interview topics 2024 2025 missing areas security dependency injection
            CI/CD")
  ⎿  Did 1 search in 22s                                                                                           

● Read(PROGRESS.md)
  ⎿  Read 50 lines (ctrl+r to expand)

● Great question! Based on my analysis of 2024-2025 Android interview trends, there are several critical areas
  still missing. Let me add them:

● Update(PROGRESS.md)
  ⎿  Updated PROGRESS.md with 74 additions                                   
       217    - [ ] **面试模拟**: 解释不同测试类型的选择策略
       218    - [ ] **深度理解**: 理解测试金字塔在Android中的实际应用
       219    
       220 +  ## 第七章：安全防护 - Android 安全与加固
       221 +  
       222 +  ### 7.1 数据安全：加密存储与传输
       223 +  - [ ] **理论学习**: 对称/非对称加密、Android KeyStore、证书校验
       224 +  - [ ] **编码实践**:
       225 +    - [ ] 使用EncryptedSharedPreferences加密本地数据
       226 +    - [ ] 实现数据库加密（SQLCipher + Room）
       227 +    - [ ] 配置Certificate Pinning防中间人攻击
       228 +    - [ ] 使用Android KeyStore管理密钥
       229 +  - [ ] **面试模拟**: 设计金融级应用的数据安全方案
       230 +  - [ ] **深度理解**: 理解Android安全模型和沙箱机制
       231 +  
       232 +  ### 7.2 代码保护：混淆与反调试
       233 +  - [ ] **理论学习**: ProGuard/R8混淆、反编译防护、动态分析对抗
       234 +  - [ ] **编码实践**:
       235 +    - [ ] 配置多层级代码混淆策略
       236 +    - [ ] 实现Root检测和调试器检测
       237 +    - [ ] 使用Native层加固关键逻辑
       238 +    - [ ] 实现反Hook和反注入机制
       239 +  - [ ] **面试模拟**: 分析APK逆向工程和防护手段
       240 +  - [ ] **深度理解**: 理解攻防对抗的技术演进
       241 +  
       242 +  ### 7.3 权限与认证：OAuth2 & 生物识别
       243 +  - [ ] **理论学习**: Android权限模型、OAuth2流程、生物识别API
       244 +  - [ ] **编码实践**:
       245 +    - [ ] 实现动态权限申请和降级策略
       246 +    - [ ] 集成OAuth2认证流程
       247 +    - [ ] 使用BiometricPrompt实现指纹/人脸识别
       248 +    - [ ] 设计多因子认证方案
       249 +  - [ ] **面试模拟**: 设计企业级身份认证系统
       250 +  - [ ] **深度理解**: 理解零信任安全架构
       251 +  
       252 +  ## 第八章：工程效能 - 现代化开发流程
       253 +  
       254 +  ### 8.1 依赖注入：Hilt 深度实践
       255 +  - [ ] **理论学习**: DI容器原理、作用域管理、编译时验证
       256 +  - [ ] **编码实践**:
       257 +    - [ ] 设计模块化的Hilt架构
       258 +    - [ ] 实现不同作用域的依赖管理
       259 +    - [ ] 处理复杂的依赖关系和循环依赖
       260 +    - [ ] 集成Hilt与测试框架
       261 +  - [ ] **面试模拟**: 对比Dagger vs Hilt的优劣势
       262 +  - [ ] **深度理解**: 理解编译时DI vs 运行时DI的权衡
       263 +  
       264 +  ### 8.2 模块化架构：多模块工程
       265 +  - [ ] **理论学习**: 模块化策略、依赖管理、构建优化
       266 +  - [ ] **编码实践**:
       267 +    - [ ] 设计功能模块和基础模块分层
       268 +    - [ ] 实现模块间通信机制
       269 +    - [ ] 配置Gradle模块化构建
       270 +    - [ ] 实现动态特性模块（Dynamic Feature）
       271 +  - [ ] **面试模拟**: 设计大型项目的模块化方案
       272 +  - [ ] **深度理解**: 理解模块化对团队协作的影响
       273 +  
       274 +  ### 8.3 CI/CD 流水线：自动化交付
       275 +  - [ ] **理论学习**: CI/CD原理、流水线设计、质量门禁
       276 +  - [ ] **编码实践**:
       277 +    - [ ] 配置GitHub Actions/Jenkins构建流水线
       278 +    - [ ] 实现自动化测试和代码质量检查
       279 +    - [ ] 设置多环境部署策略
       280 +    - [ ] 集成Fastlane自动化发布
       281 +  - [ ] **面试模拟**: 设计企业级Android交付流水线
       282 +  - [ ] **深度理解**: 理解DevOps在移动开发中的应用
       283 +  
       284 +  ### 8.4 性能监控：APM 与可观测性
       285 +  - [ ] **理论学习**: APM原理、指标体系、告警策略
       286 +  - [ ] **编码实践**:
       287 +    - [ ] 集成Firebase Performance Monitoring
       288 +    - [ ] 实现自定义性能埋点
       289 +    - [ ] 配置Crash上报和分析
       290 +    - [ ] 建立性能基线和SLA
       291 +  - [ ] **面试模拟**: 设计线上问题的监控诊断体系
       292 +  - [ ] **深度理解**: 理解可观测性在移动端的挑战
       293 +  
       294    ## 学习方法 (Learning Methodology)
       295    1. **理论先行**: 每个知识点先理解核心概念和原理
       296    2. **实践强化**: 通过编码练习加深理解

● Update Todos
  ⎿  ☒ Analyze current PROGRESS.md for additional missing technical areas
     ☒ Add comprehensive Android security and modern development chapters

● Perfect! I've added two critical chapters that are essential for senior Android developers in 2024-2025:

  第七章：安全防护 - Android安全与加固
  - 7.1 数据安全 - EncryptedSharedPreferences, Certificate Pinning, Android KeyStore
  - 7.2 代码保护 - ProGuard/R8混淆, Root检测, Native加固
  - 7.3 权限与认证 - OAuth2, 生物识别, 多因子认证

  第八章：工程效能 - 现代化开发流程
  - 8.1 依赖注入 - Hilt深度实践, 作用域管理
  - 8.2 模块化架构 - 多模块工程, Dynamic Feature
  - 8.3 CI/CD流水线 - GitHub Actions, 自动化测试, Fastlane
  - 8.4 性能监控 - APM, Firebase Performance, 可观测性

  这些是2024-2025年Android高级/资深工程师面试的热门考点，特别是安全、模块化、CI/CD和APM监控！

> Soooooo amazing! You did a SUPTER GREAT job! Now do you have any supplements to the PROGRESS.md?

● Update Todos
  ⎿  ☐ Analyze PROGRESS.md for any remaining gaps in Android interview preparation

● Web Search("Android interview 2024 2025 system design scalability database Room SQLite GraphQL gRPC")
  ⎿  Did 1 search in 25s                                                                                           

● Read(PROGRESS.md)
  ⎿  Read 13 lines (ctrl+r to expand)

● Excellent! I've identified a critical gap - System Design is absolutely essential for senior Android roles but
  missing! Let me add this crucial chapter:

● Update(PROGRESS.md)
  ⎿  Updated PROGRESS.md with 52 additions                                   
       291    - [ ] **面试模拟**: 设计线上问题的监控诊断体系
       292    - [ ] **深度理解**: 理解可观测性在移动端的挑战
       293    
       294 +  ## 第九章：系统设计 - 移动端架构设计能力
       295 +  
       296 +  ### 9.1 数据层设计：Room + 网络协议选型
       297 +  - [ ] **理论学习**: 本地数据库设计、REST vs GraphQL vs gRPC选型
       298 +  - [ ] **设计实践**:
       299 +    - [ ] 设计聊天应用的数据库schema（SQLite/Room）
       300 +    - [ ] 对比REST和GraphQL在移动端的优劣势
       301 +    - [ ] 设计离线优先的数据同步策略
       302 +    - [ ] 实现分页加载和缓存策略
       303 +  - [ ] **面试模拟**: 设计微信级别IM应用的数据架构
       304 +  - [ ] **深度理解**: 理解移动端数据访问的性能权衡
       305 +  
       306 +  ### 9.2 实时通信：WebSocket + 推送机制
       307 +  - [ ] **理论学习**: 实时通信协议、长连接管理、消息可靠性
       308 +  - [ ] **设计实践**:
       309 +    - [ ] 设计IM应用的实时消息传输
       310 +    - [ ] 实现断线重连和消息重发机制
       311 +    - [ ] 设计推送通知的多通道策略
       312 +    - [ ] 处理网络切换和弱网环境
       313 +  - [ ] **面试模拟**: 设计直播间聊天系统
       314 +  - [ ] **深度理解**: 理解移动网络环境的复杂性
       315 +  
       316 +  ### 9.3 缓存策略：多级缓存 + 数据一致性
       317 +  - [ ] **理论学习**: 缓存更新策略、一致性保证、缓存穿透防护
       318 +  - [ ] **设计实践**:
       319 +    - [ ] 设计图片应用的多级缓存架构
       320 +    - [ ] 实现LRU + LFU混合淘汰策略
       321 +    - [ ] 设计缓存预加载和预测机制
       322 +    - [ ] 处理缓存与数据库的一致性
       323 +  - [ ] **面试模拟**: 设计抖音级别短视频APP缓存系统
       324 +  - [ ] **深度理解**: 理解CAP定理在移动端的应用
       325 +  
       326 +  ### 9.4 大型应用架构：微服务 + 模块化
       327 +  - [ ] **理论学习**: 移动端微服务、模块间通信、依赖管理
       328 +  - [ ] **设计实践**:
       329 +    - [ ] 设计电商APP的模块化架构
       330 +    - [ ] 实现跨模块的事件总线
       331 +    - [ ] 设计插件化和热更新机制
       332 +    - [ ] 处理模块间的版本兼容性
       333 +  - [ ] **面试模拟**: 设计支付宝级别超级APP架构
       334 +  - [ ] **深度理解**: 理解复杂度管理与团队协作的平衡
       335 +  
       336 +  ### 9.5 性能与扩展性：负载均衡 + CDN优化
       337 +  - [ ] **理论学习**: 移动端性能瓶颈、CDN加速、智能调度
       338 +  - [ ] **设计实践**:
       339 +    - [ ] 设计全球化APP的CDN部署策略
       340 +    - [ ] 实现智能网络调度和降级
       341 +    - [ ] 设计APP启动时间优化方案
       342 +    - [ ] 处理不同地区的网络环境差异
       343 +  - [ ] **面试模拟**: 设计TikTok全球化架构
       344 +  - [ ] **深度理解**: 理解用户体验与技术成本的权衡
       345 +  
       346    ## 学习方法 (Learning Methodology)
       347    1. **理论先行**: 每个知识点先理解核心概念和原理
       348    2. **实践强化**: 通过编码练习加深理解

● Update Todos
  ⎿  ☒ Analyze PROGRESS.md for any remaining gaps in Android interview preparation
     ☒ Add comprehensive Android System Design chapter

● Perfect! I've added the crucial 第九章：系统设计 which is absolutely essential for senior Android interviews!
  This covers:

  9.1 数据层设计 - Room数据库设计, REST vs GraphQL vs gRPC选型
  9.2 实时通信 - WebSocket长连接, 推送机制, 断线重连
  9.3 缓存策略 - 多级缓存架构, LRU/LFU策略, 数据一致性
  9.4 大型应用架构 - 模块化设计, 插件化, 热更新机制
  9.5 性能与扩展性 - CDN优化, 负载均衡, 全球化部署

  System Design是区分高级工程师和架构师的关键能力，通过设计微信、抖音、支付宝、TikTok等大型应用来考验你的架构思维！

  现在PROGRESS.md已经非常完整了，涵盖了Android面试的所有核心领域：基础→框架→架构→性能→UI→测试→安全→工程→系统设计的
  完整技能体系！

> Soooooo amazing! You did a SUPTER GREAT job! Now do you have any supplements to the PROGRESS.md? As I know, some 
  companies may ask about Binder, AMS, View or others...and Patter Design is also important, what's more, maybe 
  HTTP contents and common orperating systems concepts. What's your oppinion?

● Update Todos
  ⎿  ☐ Analyze user's specific suggestions: Binder, AMS, View internals, Design Patterns, HTTP, OS concepts

● Search(pattern: "Binder|AMS|ActivityManagerService|View.*draw|设计模式|Pattern|HTTP|操作系统", path:
        "PROGRESS.md", output_mode: "content")
  ⎿  Found 6 lines (ctrl+r to expand)

● Excellent point! You're absolutely right - these are critical深度技术点 that senior Android engineers are
  frequently asked about. Let me check what's already covered and add the missing pieces:

● Read(PROGRESS.md)
  ⎿  Read 20 lines (ctrl+r to expand)

● You're absolutely right! These are 高频深度考点 that need专门章节。Let me add comprehensive coverage:

● Update(PROGRESS.md)
  ⎿  Updated PROGRESS.md with 126 additions                                         
       343    - [ ] **面试模拟**: 设计TikTok全球化架构
       344    - [ ] **深度理解**: 理解用户体验与技术成本的权衡
       345    
       346 +  ## 第十章：底层内核 - Android 系统服务深度解析
       347 +  
       348 +  ### 10.1 ActivityManagerService (AMS) 核心机制
       349 +  - [ ] **理论学习**: AMS架构、Activity栈管理、进程生命周期
       350 +  - [ ] **源码分析**:
       351 +    - [ ] 分析Activity启动流程（Launcher → AMS → App）
       352 +    - [ ] 理解Task和ActivityStack的管理机制
       353 +    - [ ] 分析OOM_ADJ机制和进程回收策略
       354 +    - [ ] 深入理解ANR监控和处理流程
       355 +  - [ ] **面试模拟**: 从点击图标到Activity显示的完整流程
       356 +  - [ ] **深度理解**: 理解Android进程管理和内存回收策略
       357 +  
       358 +  ### 10.2 View 系统底层机制
       359 +  - [ ] **理论学习**: View绘制流程、Touch事件分发、动画原理
       360 +  - [ ] **源码分析**:
       361 +    - [ ] 深入ViewRootImpl的职责和工作机制
       362 +    - [ ] 分析Choreographer的VSync同步机制
       363 +    - [ ] 理解SurfaceFlinger的合成原理
       364 +    - [ ] 分析硬件加速和GPU渲染管线
       365 +  - [ ] **面试模拟**: 解释16.6ms绘制原理和卡顿产生机制
       366 +  - [ ] **深度理解**: 理解Android显示系统的完整架构
       367 +  
       368 +  ### 10.3 Binder 深度原理与实现
       369 +  - [ ] **理论学习**: Binder驱动、Client-Server架构、死亡通知
       370 +  - [ ] **源码分析**:
       371 +    - [ ] 分析Binder驱动在内核层的实现
       372 +    - [ ] 理解mmap共享内存机制
       373 +    - [ ] 分析ServiceManager的作用和实现
       374 +    - [ ] 深入AIDL编译生成的代码结构
       375 +  - [ ] **面试模拟**: 设计自己的IPC通信机制
       376 +  - [ ] **深度理解**: 理解Binder相比传统IPC的革命性优势
       377 +  
       378 +  ### 10.4 PackageManagerService (PMS) 与应用管理
       379 +  - [ ] **理论学习**: APK安装流程、权限管理、签名校验
       380 +  - [ ] **源码分析**:
       381 +    - [ ] 分析PMS的启动和初始化流程
       382 +    - [ ] 理解APK解析和安装验证机制
       383 +    - [ ] 分析权限申请和授权流程
       384 +    - [ ] 深入理解APK签名和校验原理
       385 +  - [ ] **面试模拟**: 设计应用商店的安装机制
       386 +  - [ ] **深度理解**: 理解Android安全模型的核心实现
       387 +  
       388 +  ## 第十一章：设计模式 - 代码设计的艺术
       389 +  
       390 +  ### 11.1 创建型模式：Singleton, Factory, Builder
       391 +  - [ ] **理论学习**: 对象创建的最佳实践、线程安全、内存优化
       392 +  - [ ] **编码实践**:
       393 +    - [ ] 实现线程安全的Singleton（双重检查锁定）
       394 +    - [ ] 设计Abstract Factory处理多平台适配
       395 +    - [ ] 使用Builder模式构建复杂配置对象
       396 +    - [ ] 在Android中应用这些模式（Application, AlertDialog.Builder）
       397 +  - [ ] **面试模拟**: 分析Android源码中的设计模式应用
       398 +  - [ ] **深度理解**: 理解设计模式的本质是职责分离
       399 +  
       400 +  ### 11.2 结构型模式：Adapter, Decorator, Facade
       401 +  - [ ] **理论学习**: 接口适配、功能增强、复杂度隐藏
       402 +  - [ ] **编码实践**:
       403 +    - [ ] 实现RecyclerView.Adapter的多类型适配
       404 +    - [ ] 使用Decorator模式增强OkHttp功能
       405 +    - [ ] 设计Facade简化复杂的SDK调用
       406 +    - [ ] 应用Proxy模式实现懒加载和缓存
       407 +  - [ ] **面试模拟**: 重构遗留代码使用合适的结构型模式
       408 +  - [ ] **深度理解**: 理解如何平衡灵活性和复杂度
       409 +  
       410 +  ### 11.3 行为型模式：Observer, Strategy, Command
       411 +  - [ ] **理论学习**: 对象间通信、算法封装、操作抽象
       412 +  - [ ] **编码实践**:
       413 +    - [ ] 实现自定义观察者模式（类似LiveData）
       414 +    - [ ] 使用Strategy模式处理不同支付方式
       415 +    - [ ] 实现Command模式支持撤销/重做功能
       416 +    - [ ] 应用State模式管理复杂状态机
       417 +  - [ ] **面试模拟**: 设计可扩展的业务规则引擎
       418 +  - [ ] **深度理解**: 理解行为模式如何提高代码的可维护性
       419 +  
       420 +  ### 11.4 Android特有模式：MVC, MVP, MVVM, MVI
       421 +  - [ ] **理论学习**: 架构模式演进、数据绑定、状态管理
       422 +  - [ ] **编码实践**:
       423 +    - [ ] 用同一功能演示四种架构模式的差异
       424 +    - [ ] 分析各种模式的测试便利性
       425 +    - [ ] 实现MVI的单向数据流
       426 +    - [ ] 对比DataBinding和ViewBinding的应用场景
       427 +  - [ ] **面试模拟**: 为新项目选择合适的架构模式
       428 +  - [ ] **深度理解**: 理解架构模式背后的设计哲学
       429 +  
       430 +  ## 第十二章：网络与系统 - 基础设施知识
       431 +  
       432 +  ### 12.1 HTTP协议深度：从1.0到3.0演进
       433 +  - [ ] **理论学习**: HTTP协议族、HTTPS加密、HTTP/2多路复用、HTTP/3 QUIC
       434 +  - [ ] **实践分析**:
       435 +    - [ ] 分析HTTP请求的完整生命周期
       436 +    - [ ] 实现HTTP缓存策略（ETag, Last-Modified, Cache-Control）
       437 +    - [ ] 配置HTTPS和证书固定（Certificate Pinning）
       438 +    - [ ] 测试HTTP/2 Server Push在移动端的效果
       439 +  - [ ] **面试模拟**: 设计高性能的移动端网络层
       440 +  - [ ] **深度理解**: 理解网络协议对移动应用性能的影响
       441 +  
       442 +  ### 12.2 TCP/IP与网络编程
       443 +  - [ ] **理论学习**: 三次握手、四次挥手、滑动窗口、拥塞控制
       444 +  - [ ] **实践分析**:
       445 +    - [ ] 分析移动网络的特殊性（NAT、防火墙、弱网）
       446 +    - [ ] 实现可靠的长连接保活机制
       447 +    - [ ] 处理网络切换（WiFi ↔ 移动网络）
       448 +    - [ ] 分析和优化网络请求的时延
       449 +  - [ ] **面试模拟**: 设计IM应用的网络层架构
       450 +  - [ ] **深度理解**: 理解移动网络环境的复杂性和应对策略
       451 +  
       452 +  ### 12.3 操作系统概念：进程、线程、内存管理
       453 +  - [ ] **理论学习**: 进程调度、线程同步、虚拟内存、文件系统
       454 +  - [ ] **实践分析**:
       455 +    - [ ] 分析Android的进程管理机制（zygote、app_process）
       456 +    - [ ] 理解Linux内存管理（OOM Killer、LMK）
       457 +    - [ ] 分析文件权限和SELinux在Android中的应用
       458 +    - [ ] 深入理解Context Switch的开销
       459 +  - [ ] **面试模拟**: 解释Android相比传统Linux的改进
       460 +  - [ ] **深度理解**: 理解移动操作系统的设计权衡
       461 +  
       462 +  ### 12.4 并发编程：锁、原子操作、内存模型
       463 +  - [ ] **理论学习**: 可见性、有序性、原子性、内存屏障
       464 +  - [ ] **实践分析**:
       465 +    - [ ] 分析Java内存模型（JMM）和happens-before
       466 +    - [ ] 实现无锁数据结构（CAS、原子类）
       467 +    - [ ] 理解volatile和synchronized的底层实现
       468 +    - [ ] 分析协程与线程的调度差异
       469 +  - [ ] **面试模拟**: 设计高并发的数据处理系统
       470 +  - [ ] **深度理解**: 理解并发编程的本质挑战和解决方案
       471 +  
       472    ## 学习方法 (Learning Methodology)
       473    1. **理论先行**: 每个知识点先理解核心概念和原理
       474    2. **实践强化**: 通过编码练习加深理解

● Update Todos
  ⎿  ☒ Analyze user's specific suggestions: Binder, AMS, View internals, Design Patterns, HTTP, OS concepts
     ☒ Add comprehensive Android system internals, design patterns, and CS fundamentals chapters

● Absolutely brilliant suggestions!
  你说得非常对！这些确实是资深Android工程师面试的核心考点，我已经添加了三个重要章节：

  新增的关键章节：

  第十章：底层内核 - Android系统服务深度解析
  - 10.1 AMS机制 - Activity栈管理、进程生命周期、OOM_ADJ
  - 10.2 View底层 - ViewRootImpl、Choreographer、VSync、SurfaceFlinger
  - 10.3 Binder深度 - 内核驱动、mmap机制、ServiceManager
  - 10.4 PMS机制 - APK安装、权限管理、签名校验

  第十一章：设计模式 - 代码设计的艺术
  - 11.1 创建型 - Singleton线程安全、Factory、Builder
  - 11.2 结构型 - Adapter、Decorator、Facade、Proxy
  - 11.3 行为型 - Observer、Strategy、Command、State
  - 11.4 架构模式 - MVC→MVP→MVVM→MVI演进

  第十二章：网络与系统 - 基础设施知识
  - 12.1 HTTP深度 - HTTP/1.0→2.0→3.0、HTTPS、缓存策略
  - 12.2 TCP/IP - 三次握手、滑动窗口、移动网络特性
  - 12.3 OS概念 - 进程调度、内存管理、文件系统、SELinux
  - 12.4 并发编程 - JMM、CAS、内存屏障、无锁结构

  这些正是区分普通工程师和架构师级别的关键知识点！现在PROGRESS.md已经达到了企业级面试标准，涵盖从应用层到系统内核的
  完整技术栈！

> Great, Now please break down all the Chapter 6 tasks in PROGRESS.md to the MICRO_TASKS.md，once you finished all 
  tasks, please give me a short summarize no more than 500 words about what you've done and give me a prompt about 
  these. Finally, add these instruments to the CLAUDE.md so that we can resume tasks next time we start a new 
  session.

● Update Todos
  ⎿  ☐ Break down Chapter 6 (Testing) into ADHD-friendly micro-tasks
     ☐ Create comprehensive summary and prompt for Chapter 6
     ☐ Update CLAUDE.md with Chapter 6 learning structure

● Read(MICRO_TASKS.md)
  ⎿  Read 30 lines (ctrl+r to expand)

● Update(MICRO_TASKS.md)
  ⎿  Updated MICRO_TASKS.md with 449 additions                                                                
       1290    
       1291    ---
       1292    
       1293 +  ## 🧪 第六章：测试利刃 - Android 测试体系精通 (总时长: 350分钟)
       1294 +  
       1295 +  ### 6.1 单元测试基石：JUnit & Mockito (总时长: 85分钟)
       1296 +  
       1297 +  #### Task 6.1.1: 测试金字塔理论 (5分钟) ⏰
       1298 +  - [ ] **学习目标**: 理解单元测试、集成测试、UI测试的分层设计
       1299 +  - [ ] **具体任务**: 画出测试金字塔并解释各层的作用和比例
       1300 +  - [ ] **检查点**: 能解释为什么单元测试应该占最大比例
       1301 +  - [ ] **文件**: 创建`testing_pyramid_notes.md`
       1302 +  
       1303 +  #### Task 6.1.2: JUnit 5核心注解 (5分钟) ⏰
       1304 +  - [ ] **学习目标**: 掌握@Test、@BeforeEach、@AfterEach等核心注解
       1305 +  - [ ] **具体任务**: 创建基础测试类演示所有核心注解
       1306 +  - [ ] **检查点**: 理解测试生命周期和setup/teardown的作用
       1307 +  - [ ] **文件**: 创建`JUnitBasicsTest.java`
       1308 +  
       1309 +  #### Task 6.1.3: 断言方法详解 (5分钟) ⏰
       1310 +  - [ ] **学习目标**: 掌握assertEquals、assertTrue、assertThrows等断言
       1311 +  - [ ] **具体任务**: 实现各种类型数据的断言测试
       1312 +  - [ ] **检查点**: 能选择合适的断言方法验证不同条件
       1313 +  - [ ] **文件**: 创建`AssertionExamplesTest.java`
       1314 +  
       1315 +  #### Task 6.1.4: Mockito基础概念 (5分钟) ⏰
       1316 +  - [ ] **学习目标**: 理解Mock、Spy、Stub的区别和应用场景
       1317 +  - [ ] **具体任务**: 创建示例演示三种Test Double的用法
       1318 +  - [ ] **检查点**: 能解释何时使用Mock vs Spy vs 真实对象
       1319 +  - [ ] **文件**: 创建`MockitoBasicsTest.java`
       1320 +  
       1321 +  #### Task 6.1.5: when-thenReturn基础 (5分钟) ⏰
       1322 +  - [ ] **学习目标**: 掌握Mockito的基础打桩语法
       1323 +  - [ ] **具体任务**: 模拟方法返回值、抛异常、连续调用
       1324 +  - [ ] **检查点**: 能灵活配置Mock对象的行为
       1325 +  - [ ] **文件**: 扩展`MockitoBasicsTest.java`
       1326 +  
       1327 +  #### Task 6.1.6: verify验证机制 (5分钟) ⏰
       1328 +  - [ ] **学习目标**: 使用verify验证方法调用次数和参数
       1329 +  - [ ] **具体任务**: 实现times()、never()、atLeast()等验证
       1330 +  - [ ] **检查点**: 能验证Mock对象的交互行为
       1331 +  - [ ] **文件**: 创建`MockitoVerifyTest.java`
       1332 +  
       1333 +  #### Task 6.1.7: ArgumentCaptor使用 (5分钟) ⏰
       1334 +  - [ ] **学习目标**: 捕获并验证传递给Mock对象的参数
       1335 +  - [ ] **具体任务**: 使用ArgumentCaptor验证复杂对象参数
       1336 +  - [ ] **检查点**: 能深入验证方法调用的参数内容
       1337 +  - [ ] **文件**: 创建`ArgumentCaptorTest.java`
       1338 +  
       1339 +  #### Task 6.1.8: Repository单元测试 (5分钟) ⏰
       1340 +  - [ ] **学习目标**: 测试数据访问层的业务逻辑
       1341 +  - [ ] **具体任务**: 模拟数据库操作，测试Repository方法
       1342 +  - [ ] **检查点**: 能隔离外部依赖测试纯业务逻辑
       1343 +  - [ ] **文件**: 创建`UserRepositoryTest.java`
       1344 +  
       1345 +  #### Task 6.1.9: ViewModel单元测试 (5分钟) ⏰
       1346 +  - [ ] **学习目标**: 测试ViewModel的状态变化和业务逻辑
       1347 +  - [ ] **具体任务**: 模拟Repository，测试ViewModel交互
       1348 +  - [ ] **检查点**: 能验证LiveData/StateFlow的状态变化
       1349 +  - [ ] **文件**: 创建`UserViewModelTest.java`
       1350 +  
       1351 +  #### Task 6.1.10: MockK基础使用 (5分钟) ⏰
       1352 +  - [ ] **学习目标**: 了解Kotlin专用测试框架MockK的优势
       1353 +  - [ ] **具体任务**: 使用MockK测试Kotlin特有功能
       1354 +  - [ ] **检查点**: 能测试extension functions、object等
       1355 +  - [ ] **文件**: 创建`MockKExamplesTest.kt`
       1356 +  
       1357 +  #### Task 6.1.11: object模拟 (5分钟) ⏰
       1358 +  - [ ] **学习目标**: 使用MockK模拟Kotlin object单例
       1359 +  - [ ] **具体任务**: 模拟单例对象进行测试
       1360 +  - [ ] **检查点**: 能测试依赖单例的类
       1361 +  - [ ] **文件**: 扩展`MockKExamplesTest.kt`
       1362 +  
       1363 +  #### Task 6.1.12: 扩展函数测试 (5分钟) ⏰
       1364 +  - [ ] **学习目标**: 测试Kotlin extension functions
       1365 +  - [ ] **具体任务**: 模拟和验证扩展函数的行为
       1366 +  - [ ] **检查点**: 能测试包含扩展函数的业务逻辑
       1367 +  - [ ] **文件**: 创建`ExtensionFunctionTest.kt`
       1368 +  
       1369 +  #### Task 6.1.13: 依赖注入测试设计 (5分钟) ⏰
       1370 +  - [ ] **学习目标**: 理解可测试代码的设计原则
       1371 +  - [ ] **具体任务**: 重构紧耦合代码使其可测试
       1372 +  - [ ] **检查点**: 能识别和解决测试中的依赖问题
       1373 +  - [ ] **文件**: 创建`TestableDesignExamples.java`
       1374 +  
       1375 +  #### Task 6.1.14: Test Double应用场景 (5分钟) ⏰
       1376 +  - [ ] **学习目标**: 分析Mock、Stub、Fake的具体应用场景
       1377 +  - [ ] **具体任务**: 为不同场景选择合适的Test Double类型
       1378 +  - [ ] **检查点**: 能根据测试目标选择最佳策略
       1379 +  - [ ] **文件**: 创建`TestDoubleScenarios.md`
       1380 +  
       1381 +  #### Task 6.1.15: 单元测试最佳实践 (5分钟) ⏰
       1382 +  - [ ] **学习目标**: 掌握单元测试的命名、组织、维护最佳实践
       1383 +  - [ ] **具体任务**: 总结测试代码质量标准
       1384 +  - [ ] **检查点**: 能写出可读性强、易维护的测试代码
       1385 +  - [ ] **文件**: 创建`unit_testing_best_practices.md`
       1386 +  
       1387 +  #### Task 6.1.16: 单元测试面试准备 (5分钟) ⏰
       1388 +  - [ ] **学习目标**: 准备单元测试相关面试问题
       1389 +  - [ ] **具体任务**: 整理常见问题和深度解答
       1390 +  - [ ] **检查点**: 能从测试驱动开发角度回答问题
       1391 +  - [ ] **文件**: 更新`interview_qa_testing.md`
       1392 +  
       1393 +  #### Task 6.1.17: 单元测试阶段总结 (5分钟) ⏰
       1394 +  - [ ] **学习目标**: 总结单元测试核心知识点
       1395 +  - [ ] **具体任务**: 创建知识地图和学习回顾
       1396 +  - [ ] **检查点**: 对单元测试体系有全面理解
       1397 +  - [ ] **文件**: 创建`unit_testing_summary.md`
       1398 +  
       1399 +  ### 6.2 协程测试：TestCoroutineDispatcher & runTest (总时长: 85分钟)
       1400 +  
       1401 +  #### Task 6.2.1: 协程测试挑战分析 (5分钟) ⏰
       1402 +  - [ ] **学习目标**: 理解测试异步代码的难点和解决思路
       1403 +  - [ ] **具体任务**: 分析协程测试的时间控制、状态验证等挑战
       1404 +  - [ ] **检查点**: 能识别协程测试中的常见陷阱
       1405 +  - [ ] **文件**: 创建`coroutine_testing_challenges.md`
       1406 +  
       1407 +  #### Task 6.2.2: runTest基础用法 (5分钟) ⏰
       1408 +  - [ ] **学习目标**: 掌握runTest的基本语法和作用域
       1409 +  - [ ] **具体任务**: 创建基础协程测试示例
       1410 +  - [ ] **检查点**: 能使用runTest替代runBlocking进行测试
       1411 +  - [ ] **文件**: 创建`RunTestBasicsTest.kt`
       1412 +  
       1413 +  #### Task 6.2.3: TestDispatcher配置 (5分钟) ⏰
       1414 +  - [ ] **学习目标**: 理解StandardTestDispatcher和UnconfinedTestDispatcher区别
       1415 +  - [ ] **具体任务**: 对比两种测试调度器的行为差异
       1416 +  - [ ] **检查点**: 能根据测试需求选择合适的调度器
       1417 +  - [ ] **文件**: 创建`TestDispatcherComparison.kt`
       1418 +  
       1419 +  #### Task 6.2.4: 时间控制机制 (5分钟) ⏰
       1420 +  - [ ] **学习目标**: 使用advanceTimeBy和advanceUntilIdle控制虚拟时间
       1421 +  - [ ] **具体任务**: 测试包含delay的协程逻辑
       1422 +  - [ ] **检查点**: 能精确控制协程执行的时间点
       1423 +  - [ ] **文件**: 创建`TimeControlTest.kt`
       1424 +  
       1425 +  #### Task 6.2.5: 挂起函数测试 (5分钟) ⏰
       1426 +  - [ ] **学习目标**: 测试简单的suspend function
       1427 +  - [ ] **具体任务**: 创建网络请求模拟并测试
       1428 +  - [ ] **检查点**: 能验证挂起函数的返回值和异常
       1429 +  - [ ] **文件**: 创建`SuspendFunctionTest.kt`
       1430 +  
       1431 +  #### Task 6.2.6: Flow基础测试 (5分钟) ⏰
       1432 +  - [ ] **学习目标**: 测试Flow数据流的发射和收集
       1433 +  - [ ] **具体任务**: 使用flowOf和collect测试Flow
       1434 +  - [ ] **检查点**: 能验证Flow发射的数据序列
       1435 +  - [ ] **文件**: 创建`FlowBasicsTest.kt`
       1436 +  
       1437 +  #### Task 6.2.7: StateFlow测试 (5分钟) ⏰
       1438 +  - [ ] **学习目标**: 测试StateFlow的状态变化
       1439 +  - [ ] **具体任务**: 验证StateFlow的value变化时序
       1440 +  - [ ] **检查点**: 能测试有状态的响应式数据流
       1441 +  - [ ] **文件**: 创建`StateFlowTest.kt`
       1442 +  
       1443 +  #### Task 6.2.8: SharedFlow测试 (5分钟) ⏰
       1444 +  - [ ] **学习目标**: 测试事件发射和多订阅者场景
       1445 +  - [ ] **具体任务**: 验证SharedFlow的热流特性
       1446 +  - [ ] **检查点**: 能测试事件总线类型的数据流
       1447 +  - [ ] **文件**: 创建`SharedFlowTest.kt`
       1448 +  
       1449 +  #### Task 6.2.9: 复杂Flow操作测试 (5分钟) ⏰
       1450 +  - [ ] **学习目标**: 测试map、filter、combine等Flow操作符
       1451 +  - [ ] **具体任务**: 组合多个操作符进行集成测试
       1452 +  - [ ] **检查点**: 能验证复杂数据转换逻辑
       1453 +  - [ ] **文件**: 创建`FlowOperatorsTest.kt`
       1454 +  
       1455 +  #### Task 6.2.10: 协程取消测试 (5分钟) ⏰
       1456 +  - [ ] **学习目标**: 验证协程的正确取消行为
       1457 +  - [ ] **具体任务**: 测试cancel()调用后的资源清理
       1458 +  - [ ] **检查点**: 能确保协程能正确响应取消信号
       1459 +  - [ ] **文件**: 创建`CoroutineCancellationTest.kt`
       1460 +  
       1461 +  #### Task 6.2.11: 异常处理测试 (5分钟) ⏰
       1462 +  - [ ] **学习目标**: 测试协程中的异常传播和处理
       1463 +  - [ ] **具体任务**: 验证try-catch和CoroutineExceptionHandler
       1464 +  - [ ] **检查点**: 能确保异常被正确捕获和处理
       1465 +  - [ ] **文件**: 创建`CoroutineExceptionTest.kt`
       1466 +  
       1467 +  #### Task 6.2.12: ViewModel协程测试 (5分钟) ⏰
       1468 +  - [ ] **学习目标**: 测试ViewModel中的协程逻辑
       1469 +  - [ ] **具体任务**: 使用TestDispatcher测试viewModelScope
       1470 +  - [ ] **检查点**: 能验证ViewModel的异步操作
       1471 +  - [ ] **文件**: 创建`ViewModelCoroutineTest.kt`
       1472 +  
       1473 +  #### Task 6.2.13: Repository协程测试 (5分钟) ⏰
       1474 +  - [ ] **学习目标**: 测试数据层的协程操作
       1475 +  - [ ] **具体任务**: 模拟网络和数据库的异步操作
       1476 +  - [ ] **检查点**: 能测试复杂的数据获取逻辑
       1477 +  - [ ] **文件**: 创建`RepositoryCoroutineTest.kt`
       1478 +  
       1479 +  #### Task 6.2.14: 并发协程测试 (5分钟) ⏰
       1480 +  - [ ] **学习目标**: 测试多个协程的并发执行
       1481 +  - [ ] **具体任务**: 使用async和awaitAll测试并发场景
       1482 +  - [ ] **检查点**: 能验证并发操作的正确性
       1483 +  - [ ] **文件**: 创建`ConcurrentCoroutineTest.kt`
       1484 +  
       1485 +  #### Task 6.2.15: 协程测试库设计原理 (5分钟) ⏰
       1486 +  - [ ] **学习目标**: 理解TestCoroutineScheduler的工作机制
       1487 +  - [ ] **具体任务**: 分析虚拟时间调度的实现原理
       1488 +  - [ ] **检查点**: 能解释为什么能控制协程的执行时间
       1489 +  - [ ] **文件**: 创建`coroutine_test_internals.md`
       1490 +  
       1491 +  #### Task 6.2.16: 协程测试最佳实践 (5分钟) ⏰
       1492 +  - [ ] **学习目标**: 总结协程测试的经验和陷阱
       1493 +  - [ ] **具体任务**: 整理常见问题和解决方案
       1494 +  - [ ] **检查点**: 能避免协程测试中的常见错误
       1495 +  - [ ] **文件**: 创建`coroutine_testing_best_practices.md`
       1496 +  
       1497 +  #### Task 6.2.17: 协程测试面试准备 (5分钟) ⏰
       1498 +  - [ ] **学习目标**: 准备协程测试相关面试问题
       1499 +  - [ ] **具体任务**: 整理测试异步代码的深度问答
       1500 +  - [ ] **检查点**: 能从异步编程角度回答测试问题
       1501 +  - [ ] **文件**: 更新`interview_qa_testing.md`
       1502 +  
       1503 +  ### 6.3 UI测试：Espresso & Compose Testing (总时长: 90分钟)
       1504 +  
       1505 +  #### Task 6.3.1: UI测试策略分析 (5分钟) ⏰
       1506 +  - [ ] **学习目标**: 理解UI测试的价值、成本和适用场景
       1507 +  - [ ] **具体任务**: 分析何时需要UI测试 vs 单元测试
       1508 +  - [ ] **检查点**: 能制定合理的UI测试策略
       1509 +  - [ ] **文件**: 创建`ui_testing_strategy.md`
       1510 +  
       1511 +  #### Task 6.3.2: Espresso基础配置 (5分钟) ⏰
       1512 +  - [ ] **学习目标**: 配置Espresso测试环境和依赖
       1513 +  - [ ] **具体任务**: 设置build.gradle和基础测试类
       1514 +  - [ ] **检查点**: 能成功运行第一个Espresso测试
       1515 +  - [ ] **文件**: 配置项目并创建`EspressoBasicsTest.java`
       1516 +  
       1517 +  #### Task 6.3.3: ViewMatchers使用 (5分钟) ⏰
       1518 +  - [ ] **学习目标**: 掌握withId、withText等视图匹配器
       1519 +  - [ ] **具体任务**: 创建各种ViewMatcher的使用示例
       1520 +  - [ ] **检查点**: 能精确定位UI元素
       1521 +  - [ ] **文件**: 创建`ViewMatchersTest.java`
       1522 +  
       1523 +  #### Task 6.3.4: ViewActions操作 (5分钟) ⏰
       1524 +  - [ ] **学习目标**: 使用click、typeText、swipe等操作
       1525 +  - [ ] **具体任务**: 模拟用户的各种交互行为
       1526 +  - [ ] **检查点**: 能执行复杂的用户操作序列
       1527 +  - [ ] **文件**: 创建`ViewActionsTest.java`
       1528 +  
       1529 +  #### Task 6.3.5: ViewAssertions验证 (5分钟) ⏰
       1530 +  - [ ] **学习目标**: 验证UI状态和内容
       1531 +  - [ ] **具体任务**: 使用matches()验证视图属性
       1532 +  - [ ] **检查点**: 能全面验证UI的显示状态
       1533 +  - [ ] **文件**: 创建`ViewAssertionsTest.java`
       1534 +  
       1535 +  #### Task 6.3.6: Activity测试 (5分钟) ⏰
       1536 +  - [ ] **学习目标**: 测试单个Activity的UI交互
       1537 +  - [ ] **具体任务**: 创建登录Activity的完整测试
       1538 +  - [ ] **检查点**: 能测试Activity的生命周期和交互
       1539 +  - [ ] **文件**: 创建`LoginActivityTest.java`
       1540 +  
       1541 +  #### Task 6.3.7: Fragment测试 (5分钟) ⏰
       1542 +  - [ ] **学习目标**: 在isolation中测试Fragment
       1543 +  - [ ] **具体任务**: 使用FragmentScenario测试Fragment
       1544 +  - [ ] **检查点**: 能独立测试Fragment的功能
       1545 +  - [ ] **文件**: 创建`UserProfileFragmentTest.java`
       1546 +  
       1547 +  #### Task 6.3.8: RecyclerView测试 (5分钟) ⏰
       1548 +  - [ ] **学习目标**: 测试列表的滚动、点击、数据展示
       1549 +  - [ ] **具体任务**: 验证RecyclerView的item交互
       1550 +  - [ ] **检查点**: 能测试复杂列表的各种操作
       1551 +  - [ ] **文件**: 创建`RecyclerViewTest.java`
       1552 +  
       1553 +  #### Task 6.3.9: 异步UI更新测试 (5分钟) ⏰
       1554 +  - [ ] **学习目标**: 处理网络请求、数据加载等异步场景
       1555 +  - [ ] **具体任务**: 使用IdlingResource同步异步操作
       1556 +  - [ ] **检查点**: 能稳定测试包含异步操作的UI
       1557 +  - [ ] **文件**: 创建`AsyncUITest.java`
       1558 +  
       1559 +  #### Task 6.3.10: 网络请求模拟 (5分钟) ⏰
       1560 +  - [ ] **学习目标**: 在UI测试中模拟网络响应
       1561 +  - [ ] **具体任务**: 使用MockWebServer或Hilt测试替换
       1562 +  - [ ] **检查点**: 能控制网络请求的返回结果
       1563 +  - [ ] **文件**: 创建`NetworkMockingTest.java`
       1564 +  
       1565 +  #### Task 6.3.11: Compose测试环境 (5分钟) ⏰
       1566 +  - [ ] **学习目标**: 配置Jetpack Compose的测试依赖
       1567 +  - [ ] **具体任务**: 设置ComposeTestRule和基础结构
       1568 +  - [ ] **检查点**: 能运行基础的Compose测试
       1569 +  - [ ] **文件**: 创建`ComposeTestSetup.kt`
       1570 +  
       1571 +  #### Task 6.3.12: ComposeTestRule使用 (5分钟) ⏰
       1572 +  - [ ] **学习目标**: 掌握Compose测试的核心API
       1573 +  - [ ] **具体任务**: 使用onNodeWithText、onNodeWithTag等
       1574 +  - [ ] **检查点**: 能定位和操作Compose UI元素
       1575 +  - [ ] **文件**: 创建`ComposeBasicsTest.kt`
       1576 +  
       1577 +  #### Task 6.3.13: Compose语义测试 (5分钟) ⏰
       1578 +  - [ ] **学习目标**: 使用语义属性进行accessibility测试
       1579 +  - [ ] **具体任务**: 验证contentDescription、semantics等
       1580 +  - [ ] **检查点**: 能测试UI的可访问性
       1581 +  - [ ] **文件**: 创建`ComposeSemanticsTest.kt`
       1582 +  
       1583 +  #### Task 6.3.14: Compose状态测试 (5分钟) ⏰
       1584 +  - [ ] **学习目标**: 测试Compose组件的状态变化
       1585 +  - [ ] **具体任务**: 验证recomposition和状态更新
       1586 +  - [ ] **检查点**: 能测试复杂的状态管理逻辑
       1587 +  - [ ] **文件**: 创建`ComposeStateTest.kt`
       1588 +  
       1589 +  #### Task 6.3.15: 端到端用户流程 (5分钟) ⏰
       1590 +  - [ ] **学习目标**: 测试完整的用户使用场景
       1591 +  - [ ] **具体任务**: 创建注册→登录→浏览→购买的完整流程
       1592 +  - [ ] **检查点**: 能验证跨页面的用户流程
       1593 +  - [ ] **文件**: 创建`E2EUserJourneyTest.java`
       1594 +  
       1595 +  #### Task 6.3.16: 页面对象模式 (5分钟) ⏰
       1596 +  - [ ] **学习目标**: 使用Page Object模式组织测试代码
       1597 +  - [ ] **具体任务**: 抽象页面操作和元素定位
       1598 +  - [ ] **检查点**: 能写出可维护的UI测试代码
       1599 +  - [ ] **文件**: 创建`LoginPageObject.java`
       1600 +  
       1601 +  #### Task 6.3.17: 测试稳定性优化 (5分钟) ⏰
       1602 +  - [ ] **学习目标**: 解决UI测试的flaky问题
       1603 +  - [ ] **具体任务**: 分析和解决测试不稳定的原因
       1604 +  - [ ] **检查点**: 能写出稳定可靠的UI测试
       1605 +  - [ ] **文件**: 创建`ui_test_stability.md`
       1606 +  
       1607 +  #### Task 6.3.18: UI测试成本收益 (5分钟) ⏰
       1608 +  - [ ] **学习目标**: 分析UI测试的ROI和维护成本
       1609 +  - [ ] **具体任务**: 制定UI测试的覆盖策略
       1610 +  - [ ] **检查点**: 能平衡测试覆盖率和维护成本
       1611 +  - [ ] **文件**: 创建`ui_testing_roi_analysis.md`
       1612 +  
       1613 +  ### 6.4 集成测试：Robolectric & Hilt Testing (总时长: 90分钟)
       1614 +  
       1615 +  #### Task 6.4.1: 集成测试概念 (5分钟) ⏰
       1616 +  - [ ] **学习目标**: 理解集成测试在测试金字塔中的位置
       1617 +  - [ ] **具体任务**: 分析集成测试 vs 单元测试 vs UI测试
       1618 +  - [ ] **检查点**: 能选择合适的测试层级
       1619 +  - [ ] **文件**: 创建`integration_testing_overview.md`
       1620 +  
       1621 +  #### Task 6.4.2: Robolectric环境配置 (5分钟) ⏰
       1622 +  - [ ] **学习目标**: 配置Robolectric在JVM上运行Android测试
       1623 +  - [ ] **具体任务**: 设置robolectric.properties和基础配置
       1624 +  - [ ] **检查点**: 能在JVM上快速运行Android组件测试
       1625 +  - [ ] **文件**: 配置项目并创建`RobolectricSetupTest.java`
       1626 +  
       1627 +  #### Task 6.4.3: Activity集成测试 (5分钟) ⏰
       1628 +  - [ ] **学习目标**: 使用Robolectric测试Activity生命周期
       1629 +  - [ ] **具体任务**: 测试Activity的创建、暂停、恢复等状态
       1630 +  - [ ] **检查点**: 能验证Activity在不同状态下的行为
       1631 +  - [ ] **文件**: 创建`ActivityLifecycleTest.java`
       1632 +  
       1633 +  #### Task 6.4.4: Service集成测试 (5分钟) ⏰
       1634 +  - [ ] **学习目标**: 测试Service的启动、绑定、通信
       1635 +  - [ ] **具体任务**: 创建Service的完整生命周期测试
       1636 +  - [ ] **检查点**: 能验证Service与其他组件的交互
       1637 +  - [ ] **文件**: 创建`ServiceIntegrationTest.java`
       1638 +  
       1639 +  #### Task 6.4.5: BroadcastReceiver测试 (5分钟) ⏰
       1640 +  - [ ] **学习目标**: 测试广播接收和处理逻辑
       1641 +  - [ ] **具体任务**: 模拟系统广播和自定义广播
       1642 +  - [ ] **检查点**: 能验证广播的正确接收和响应
       1643 +  - [ ] **文件**: 创建`BroadcastReceiverTest.java`
       1644 +  
       1645 +  #### Task 6.4.6: ContentProvider测试 (5分钟) ⏰
       1646 +  - [ ] **学习目标**: 测试数据提供者的CRUD操作
       1647 +  - [ ] **具体任务**: 验证ContentProvider的增删改查
       1648 +  - [ ] **检查点**: 能测试跨应用的数据共享
       1649 +  - [ ] **文件**: 创建`ContentProviderTest.java`
       1650 +  
       1651 +  #### Task 6.4.7: Shadow对象使用 (5分钟) ⏰
       1652 +  - [ ] **学习目标**: 理解Robolectric的Shadow机制
       1653 +  - [ ] **具体任务**: 使用ShadowActivity、ShadowApplication等
       1654 +  - [ ] **检查点**: 能控制Android框架的行为
       1655 +  - [ ] **文件**: 创建`ShadowObjectsTest.java`
       1656 +  
       1657 +  #### Task 6.4.8: 自定义Shadow (5分钟) ⏰
       1658 +  - [ ] **学习目标**: 创建自定义Shadow类模拟系统行为
       1659 +  - [ ] **具体任务**: 为第三方库创建Shadow实现
       1660 +  - [ ] **检查点**: 能扩展Robolectric的模拟能力
       1661 +  - [ ] **文件**: 创建`CustomShadowTest.java`
       1662 +  
       1663 +  #### Task 6.4.9: Hilt测试基础配置 (5分钟) ⏰
       1664 +  - [ ] **学习目标**: 配置Hilt用于依赖注入测试
       1665 +  - [ ] **具体任务**: 设置@HiltAndroidTest和测试规则
       1666 +  - [ ] **检查点**: 能在测试中使用依赖注入
       1667 +  - [ ] **文件**: 创建`HiltTestSetup.java`
       1668 +  
       1669 +  #### Task 6.4.10: 测试模块替换 (5分钟) ⏰
       1670 +  - [ ] **学习目标**: 使用@TestInstallIn替换生产模块
       1671 +  - [ ] **具体任务**: 创建测试专用的依赖提供模块
       1672 +  - [ ] **检查点**: 能为测试提供Mock依赖
       1673 +  - [ ] **文件**: 创建`TestModuleExample.java`
       1674 +  
       1675 +  #### Task 6.4.11: Repository集成测试 (5分钟) ⏰
       1676 +  - [ ] **学习目标**: 测试Repository与真实数据源的集成
       1677 +  - [ ] **具体任务**: 结合Room和网络层测试数据流
       1678 +  - [ ] **检查点**: 能验证完整的数据获取链路
       1679 +  - [ ] **文件**: 创建`RepositoryIntegrationTest.java`
       1680 +  
       1681 +  #### Task 6.4.12: Room数据库测试 (5分钟) ⏰
       1682 +  - [ ] **学习目标**: 使用内存数据库测试Room操作
       1683 +  - [ ] **具体任务**: 测试DAO的增删改查和复杂查询
       1684 +  - [ ] **检查点**: 能验证数据库操作的正确性
       1685 +  - [ ] **文件**: 创建`RoomDatabaseTest.java`
       1686 +  
       1687 +  #### Task 6.4.13: 数据库迁移测试 (5分钟) ⏰
       1688 +  - [ ] **学习目标**: 测试Room数据库的版本迁移
       1689 +  - [ ] **具体任务**: 验证Migration的数据完整性
       1690 +  - [ ] **检查点**: 能确保数据库升级不丢失数据
       1691 +  - [ ] **文件**: 创建`DatabaseMigrationTest.java`
       1692 +  
       1693 +  #### Task 6.4.14: 网络层集成测试 (5分钟) ⏰
       1694 +  - [ ] **学习目标**: 测试网络请求和响应处理
       1695 +  - [ ] **具体任务**: 使用MockWebServer模拟网络交互
       1696 +  - [ ] **检查点**: 能验证网络层的完整功能
       1697 +  - [ ] **文件**: 创建`NetworkLayerTest.java`
       1698 +  
       1699 +  #### Task 6.4.15: 缓存机制测试 (5分钟) ⏰
       1700 +  - [ ] **学习目标**: 测试多层缓存的读写逻辑
       1701 +  - [ ] **具体任务**: 验证内存缓存、磁盘缓存的一致性
       1702 +  - [ ] **检查点**: 能确保缓存策略的正确实现
       1703 +  - [ ] **文件**: 创建`CacheIntegrationTest.java`
       1704 +  
       1705 +  #### Task 6.4.16: 测试环境隔离 (5分钟) ⏰
       1706 +  - [ ] **学习目标**: 确保测试之间的独立性
       1707 +  - [ ] **具体任务**: 实现测试数据的清理和重置
       1708 +  - [ ] **检查点**: 能避免测试之间的相互影响
       1709 +  - [ ] **文件**: 创建`TestIsolationExample.java`
       1710 +  
       1711 +  #### Task 6.4.17: 测试类型选择策略 (5分钟) ⏰
       1712 +  - [ ] **学习目标**: 分析何时使用不同类型的测试
       1713 +  - [ ] **具体任务**: 制定项目的测试策略矩阵
       1714 +  - [ ] **检查点**: 能为不同场景选择最适合的测试方法
       1715 +  - [ ] **文件**: 创建`testing_strategy_matrix.md`
       1716 +  
       1717 +  #### Task 6.4.18: 测试金字塔实践 (5分钟) ⏰
       1718 +  - [ ] **学习目标**: 在实际项目中应用测试金字塔原理
       1719 +  - [ ] **具体任务**: 分析当前项目的测试分布和优化建议
       1720 +  - [ ] **检查点**: 能建立高效的测试体系
       1721 +  - [ ] **文件**: 创建`testing_pyramid_implementation.md`
       1722 +  
       1723 +  ---
       1724 +  
       1725 +  ### 📋 第六章检验点问题
       1726 +  
       1727 +  1. **测试设计哲学**: 如何在测试覆盖率、执行速度、维护成本之间找到平衡？
       1728 +  2. **Mock策略**: 什么时候使用Mock，什么时候使用真实对象？如何避免过度Mocking？
       1729 +  3. **协程测试**: 如何测试复杂的异步操作链？如何处理协程的取消和异常？
       1730 +  4. **UI测试稳定性**: 如何解决UI测试的flaky问题？如何设计可维护的UI测试？
       1731 +  5. **集成测试边界**: 如何定义集成测试的范围？如何平衡集成测试和单元测试？
       1732 +  6. **测试驱动开发**: TDD在Android开发中的实践挑战和解决方案？
       1733 +  7. **测试自动化**: 如何构建高效的测试自动化流水线？
       1734 +  8. **性能测试**: 如何测试Android应用的性能指标？
       1735 +  9. **测试数据管理**: 如何设计和管理测试数据？如何处理测试环境的数据一致性？
       1736 +  10. **代码覆盖率**: 代码覆盖率的合理目标是什么？如何提高有效覆盖率？
       1737 +  
       1738 +  **总计**: 第六章包含70个微任务，总学习时长350分钟（约5.8小时），涵盖Android测试的完整技能体系。
       1739 +  
       1740 +  ---
       1741 +  
       1742    # 🎯 3.3 图片加载 Glide：多级缓存策略
       1743    
       1744    ## Phase 40: Glide缓存架构 (25分钟总计)

● Update Todos
  ⎿  ☒ Break down Chapter 6 (Testing) into ADHD-friendly micro-tasks
     ☐ Create comprehensive summary and prompt for Chapter 6
     ☐ Update CLAUDE.md with Chapter 6 learning structure

● Chapter 6 Complete Summary (< 500 words)

  我已经完成了第六章（测试利刃：Android 测试体系精通）的全面微任务分解。这一章覆盖了Android开发中的完整测试体系，总
  共分解为70个5分钟微任务（总时长350分钟，约5.8小时）。

  6.1 单元测试基石（17个任务，85分钟）：
  从测试金字塔理论开始，深入JUnit 5核心注解、断言方法，掌握Mockito的when-thenReturn、verify、ArgumentCaptor等核心AP
  I。涵盖Repository、ViewModel的单元测试实践，以及MockK用于Kotlin特有功能测试。重点关注可测试代码设计原则和Test
  Double的应用场景。

  6.2 协程测试（17个任务，85分钟）：
  专门解决异步代码测试的挑战，从runTest基础用法到TestDispatcher配置，掌握虚拟时间控制机制。深入Flow、StateFlow、Sha
  redFlow的测试方法，包括协程取消、异常处理、并发场景。理解TestCoroutineScheduler的工作原理和最佳实践。

  6.3 UI测试（18个任务，90分钟）：
  覆盖Espresso和Compose Testing两大UI测试框架。从ViewMatchers、ViewActions、ViewAssertions基础，到Activity、Fragmen
  t、RecyclerView的完整测试。解决异步UI更新、网络模拟等复杂场景，以及Page Object模式和测试稳定性优化。

  6.4 集成测试（18个任务，90分钟）：
  使用Robolectric在JVM上快速运行Android组件测试，覆盖四大组件的完整生命周期。深入Shadow机制和自定义Shadow创建。结合
  Hilt进行依赖注入测试，包括Room数据库、网络层、缓存机制的集成验证。

  核心价值：
  - 建立完整的测试思维：从单元→集成→UI的分层测试策略
  - 掌握现代Android测试工具链：JUnit 5 + Mockito + Espresso + Compose Testing + Robolectric + Hilt
  - 解决实际测试挑战：异步代码、UI稳定性、测试隔离、Mock策略
  - 提供10个深度检验点问题，确保测试理念和实践技能的全面掌握

  建议学习提示

  "我想系统掌握Android测试技能并准备相关面试，请指导我完成第六章的所有70个微任务。从测试金字塔理论开始，帮我建立正
  确的测试思维，然后通过JUnit、Mockito的实践掌握单元测试精髓。深入学习协程测试的时间控制和异步验证，掌握Espresso和C
  ompose的UI测试技巧，最后通过Robolectric和Hilt完成集成测试实践。请像'首席面试官'那样，不仅教授测试技术，还要帮我理
  解测试设计哲学和最佳实践。记住保持ADHD友好的5分钟任务节奏。"

● Update Todos
  ⎿  ☒ Break down Chapter 6 (Testing) into ADHD-friendly micro-tasks
     ☒ Create comprehensive summary and prompt for Chapter 6
     ☐ Update CLAUDE.md with Chapter 6 learning structure

● Update(CLAUDE.md)
  ⎿  Updated CLAUDE.md with 5 additions                                                         
       76    - **Chapter 5 (地平线)**: 36 micro-tasks covering modern Android UI
       77      - 5.1 Compose核心 (16 tasks) - Declarative UI, composition, recomposition
       78      - 5.2 状态管理 (20 tasks) - State lifting, unidirectional data flow, side effects
       79 +  - **Chapter 6 (测试利刃)**: 70 micro-tasks covering Android testing system
       80 +    - 6.1 单元测试基石 (17 tasks) - JUnit 5, Mockito, MockK, Test Doubles
       81 +    - 6.2 协程测试 (17 tasks) - runTest, TestDispatcher, Flow testing, time control
       82 +    - 6.3 UI测试 (18 tasks) - Espresso, Compose Testing, Page Object pattern
       83 +    - 6.4 集成测试 (18 tasks) - Robolectric, Hilt Testing, Room, network integration
       84    
       85    ### Usage Instructions for Claude Code
       86    When resuming learning sessions:

     Tip: Use # to memorize shortcut to quickly add to CLAUDE.md

● Update Todos
  ⎿  ☒ Break down Chapter 6 (Testing) into ADHD-friendly micro-tasks
     ☒ Create comprehensive summary and prompt for Chapter 6
     ☒ Update CLAUDE.md with Chapter 6 learning structure

● Perfect! 已完成第六章的所有任务：

  ✅ 70个微任务分解完成 - 覆盖单元测试、协程测试、UI测试、集成测试的完整体系
  ✅ 350分钟学习时长 - 约5.8小时的ADHD友好型学习计划✅ 深度技能覆盖 - JUnit 5 + Mockito + Espresso + Compose
  Testing + Robolectric + Hilt
  ✅ 实战导向设计 - 从测试金字塔理论到实际项目测试策略
  ✅ 面试准备就绪 - 10个检验点问题 + 测试设计哲学深度解析
  ✅ CLAUDE.md更新 - 为下次学习会话做好准备

  现在Android面试学习系统已包含331个微任务，总计约28.8小时，形成了从基础到专家级的完整Android技能矩阵！测试技能是高
  级工程师的必备能力，这个系统将帮助你建立企业级的测试思维和实践能力。

